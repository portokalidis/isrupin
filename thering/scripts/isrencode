#!/bin/bash 

if [[ -z "$THERING_HOME" || ! -d "$THERING_HOME" ]]; then
	echo "THERING_HOME variable is not set"
	exit 1
fi
if [[ ! -r "$THERING_HOME/thering.conf" ]]; then
	echo "THERING_HOME not set properly. Cannot find thering.conf"
	exit 1
fi

. $THERING_HOME/thering.conf
. $THERING_HOME/scripts/functions.sh


function usage {
	echo "Usage: $0 [-hr] [-d destination_dir] file ..."
    echo "  -h                  Show this message"
    echo "  -d destination_dir  Directory to store encoded version of file(s)."
    echo "                      If destination_dir is not specified, files"
    echo "                      will be placed in $ENCBIN."
    echo "  -r                  Create a random name for the randomized binary."
    echo "                      The new name will be of the form file-XXXXXX,"
    echo "                      where XXXXXX is replaced with random characters."
	exit 1
}

# Default destination
dest=$ENCBIN
# Generate random name for destination binary
rand_name=0


# Parse options
while [ ! -z "$1" ]; do
	case $1 in
    -h)
        usage
        ;;
	-d)	
        shift
		if [ -z "$1" ]; then
            usage
		fi
        dest=`readlink -f $1`
		;;
    -r)
        rand_name=1
        ;;
    *)
        break
        ;;
    esac
    shift
done

if [ ! -d "$dest" ]; then
    echo "\"$dest\" not found or not a directory!"
    exit 1
fi

# Process files
while [ ! -z "$1" ]; do
    if [ ! -e "$1" ]; then
        echo "Invalid file \"$1\"" >&2
        exit 1
    fi

    # path of original (non-randomized) binary
    orig_path=`readlink -f $1`
    orig_fname=`basename $1`

    if [ $rand_name -gt 0 ]; then
        # Generate a temp. name
        #echo "mktemp -p $THERING_HOME $orig_fname-XXXXXX"
        dest_path=`mktemp -p $dest $orig_fname-XXXXXX`
        if [ ! -e "$dest_path" ]; then
            echo "Could not create random name for $orig_fname"
            exit 1
        fi
    else
        # Use the same name
        dest_path="$dest/$orig_fname"
    fi

    #echo "Original path: $orig_path"
    #echo "Destination path: $dest_path"

    # Check that file does not already exist in DB
    sqlstmt="select keyid from image where path='$dest_path'"
    keyid=`$SQLITE $DBFILE "$sqlstmt"`
    #echo $keyid=$SQLITE $DBFILE "$sqlstmt"
    if [ -n "$keyid" ]; then
        echo "$dest_path [Already in database]" >&2 
        exit 1
    fi

    # Check that file does not already exist in filesystem
    #if [ -e "$dest_path" ]; then
        #echo "$dest_path [Already in filesystem, but not in database]" >&2 
        #exit 1
    #fi

    generate_key

    $OBJCP 0x$enckey $orig_path $dest_path || exit 1
    chmod `stat --format="%a" $orig_path` $dest_path || (rm $dest_path; exit 1)

    # Add key in DB
    sqlstmt="BEGIN TRANSACTION; insert into image_key (key) values (x'$enckey'); insert into image values ('$dest_path', (select last_insert_rowid())); COMMIT TRANSACTION;"
    #echo $SQLITE $DBFILE "$sqlstmt"
    $SQLITE $DBFILE "$sqlstmt" || (rm $dest_path; exit 1)

    echo $dest_path
    shift
done

